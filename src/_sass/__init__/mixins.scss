//Transform mixin to for compatibility
@mixin transform($transforms) {//mixin takes a transformation as an arg
    -moz-transform: $transforms;// and makes it a bunch of transformations that
    -o-transform: $transforms;// work for different browsers
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

//https://codepen.io/sawmac/pen/cayhK/
@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}
@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}
@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function:    $timing;
    -o-transition-timing-function:      $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}


// Compatibility shadow mixin
@mixin shadow($args, $color: #ccc) {
         -moz-box-shadow: $args $color;
      -webkit-box-shadow: $args $color;
              box-shadow: $args $color;
}

// Bounds the object by a dimension i.e. height or width
@mixin boundDim( $dimension, $min: null, $max: null ) {
	@if $min { #{'min-'+$dimension}: $min; } // If there's a min, then apply it
	@if $max { #{'max-'+$dimension}: $max; } // If there's a max, then apply it
	@if not $min and not $max {
		@error "Need to specify at least one dimension to bound '"+$dimension+"'";
	}
}

// Toolkit License:
//
// Copyright (C) 2011-2014 by Sam Richard
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

$Private-Toolkit-Placeholders: ();

@mixin dynamic-extend($id) {

    $placeholder-id: map-get($Private-Toolkit-Placeholders, $id);

    @if $placeholder-id == null {

        $placeholder-id: unique-id();
        $new-map: map-merge( $Private-Toolkit-Placeholders, ($id: $placeholder-id) );
        $Private-Toolkit-Placeholders: $new-map !global;

        @at-root %#{$placeholder-id} { @content; }
    }
    @extend %#{$placeholder-id};
}
